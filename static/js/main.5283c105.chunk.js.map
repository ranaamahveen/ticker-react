{"version":3,"sources":["components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","state","items","results","symbol","count","showMe","onChangeSearch","bind","checkTicker","e","this","setState","target","value","preventDefault","sortData","tweetCount","symbolVal","itemArray","split","console","log","length","i","axios","get","then","response","push","data","messages","concat","sort","a","b","created_at","localeCompare","catch","error","setTimeout","map","eachSymbol","index","key","border","symbolName","symbolCount","style","marginTop","className","type","onChange","onClick","handleCount","handleHeader","eachField","body","Component","App","href","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAIqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,QAAS,GACTC,OAAQ,GACRC,MAAO,GACPC,QAAQ,GAEV,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVF,E,4EAYJE,GACbC,KAAKC,SAAS,CAAEV,MAAOQ,EAAEG,OAAOC,U,kCAEtBJ,GAAI,IAAD,OACbA,EAAEK,iBACF,IAAIC,EAAW,GACXC,EAAa,GACbC,EAAY,GACVC,EAAYR,KAAKV,MAAMC,MAAMkB,MAAM,KACzCC,QAAQC,IAAI,cAAeH,EAAUI,QACrC,IAPa,eAOJC,GACPC,IACGC,IADH,sCACsCP,EAAUK,KAC7CG,MAAK,SAAAC,GACJX,EAAWY,KAAKD,EAASE,KAAKC,SAASR,QACvCL,EAAUW,KAAKV,EAAUK,KACzBR,EAAWA,EAASgB,OAAOJ,EAASE,KAAKC,WAChCE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,WAAWC,cAAcH,EAAEE,eACrD,EAAKxB,SAAS,CACZR,OAAQc,EACRb,MAAOY,EACPd,QAASa,EACTV,QAAQ,OAGXgC,OAAM,SAASC,GACdlB,QAAQC,IAAIiB,MAEhBC,WAAWf,IAAO,MAlBXD,EAAI,EAAGA,EAAIL,EAAUI,OAAQC,IAAM,EAAnCA,K,mCAsBT,OAAOb,KAAKV,MAAMG,OAAOqC,KAAI,SAASC,EAAYC,GAChD,OAAO,yBAAKC,IAAKD,GAAQD,Q,oCAI3B,OAAO/B,KAAKV,MAAMI,MAAMoC,KAAI,SAASC,EAAYC,GAC/C,OAAO,yBAAKC,IAAKD,GAAQD,Q,oCAI3B,GAAI/B,KAAKV,MAAMK,OACb,OACE,2BAAOuC,OAAQ,GACb,+BACE,4BACE,sCACA,kDAGJ,+BACE,4BACE,4BAAKlC,KAAKmC,cACV,4BAAKnC,KAAKoC,oB,qCAQpB,GAAIpC,KAAKV,MAAMK,OACb,OACE,4BACE,sCACA,sCACA,6C,+BAMN,OACE,yBAAK0C,MAAO,CAAEC,UAAW,KACvB,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,wBAAIA,UAAU,eAAd,qBACA,+BAGJ,8BACE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,eACVpC,MAAOH,KAAKV,MAAMC,MAClBkD,SAAUzC,KAAKJ,mBAIrB,yBAAK2C,UAAU,YACb,4BACEA,UAAU,2BACVG,QAAS1C,KAAKF,aAFhB,YAQJ,6BACCE,KAAK2C,cACN,6BACA,2BAAOT,OAAQ,GACb,+BACGlC,KAAK4C,eACL5C,KAAKV,MAAME,QAAQsC,KAAI,SAASe,EAAWb,GAC1C,OACE,wBAAIC,IAAKD,GACP,4BAAKA,EAAQ,GACb,4BAAKa,EAAUC,MACf,4BAAKD,EAAUpB,wB,GAhICsB,aCwBrBC,E,iLArBX,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,iDACb,uBACEA,UAAU,eACVU,KAAK,gCACL/C,OAAO,WAET,kBAAC,IAAD,CAAMgD,GAAG,IAAIX,UAAU,gBAAvB,0BAIF,6BACA,kBAAC,IAAD,CAAOY,KAAK,IAAIC,UAAWhE,U,GAhBnB2D,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.5283c105.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default class Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: \"\",\r\n      results: [],\r\n      symbol: [],\r\n      count: [],\r\n      showMe: false\r\n    };\r\n    this.onChangeSearch = this.onChangeSearch.bind(this);\r\n    this.checkTicker = this.checkTicker.bind(this);\r\n  }\r\n  onChangeSearch(e) {\r\n    this.setState({ items: e.target.value });\r\n  }\r\n  checkTicker(e) {\r\n    e.preventDefault();\r\n    let sortData = [];\r\n    let tweetCount = [];\r\n    let symbolVal = [];\r\n    const itemArray = this.state.items.split(\",\");\r\n    console.log(\"itemArray: \", itemArray.length);\r\n    for (let i = 0; i < itemArray.length; i++) {\r\n      axios\r\n        .get(`http://localhost:4000/todos/${itemArray[i]}`)\r\n        .then(response => {\r\n          tweetCount.push(response.data.messages.length);\r\n          symbolVal.push(itemArray[i]);\r\n          sortData = sortData.concat(response.data.messages);\r\n          sortData.sort((a, b) => b.created_at.localeCompare(a.created_at));\r\n          this.setState({\r\n            symbol: symbolVal,\r\n            count: tweetCount,\r\n            results: sortData,\r\n            showMe: true\r\n          });\r\n        })\r\n        .catch(function(error) {\r\n          console.log(error);\r\n        });\r\n      setTimeout(axios, 5000);\r\n    }\r\n  }\r\n  symbolName() {\r\n    return this.state.symbol.map(function(eachSymbol, index) {\r\n      return <div key={index}>{eachSymbol}</div>;\r\n    });\r\n  }\r\n  symbolCount() {\r\n    return this.state.count.map(function(eachSymbol, index) {\r\n      return <div key={index}>{eachSymbol}</div>;\r\n    });\r\n  }\r\n  handleCount() {\r\n    if (this.state.showMe) {\r\n      return (\r\n        <table border={1}>\r\n          <thead>\r\n            <tr>\r\n              <th>Symbol</th>\r\n              <th>Number of Tweets</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{this.symbolName()}</td>\r\n              <td>{this.symbolCount()}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n  }\r\n  handleHeader() {\r\n    if (this.state.showMe) {\r\n      return (\r\n        <tr>\r\n          <th>Number</th>\r\n          <th>Tweets</th>\r\n          <th>Time Stamp</th>\r\n        </tr>\r\n      );\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{ marginTop: 10 }}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-5\"></div>\r\n          <div className=\"col-md-6\">\r\n            <h3 className=\"text-danger\">Search for Tweets</h3>\r\n            <br />\r\n          </div>\r\n        </div>\r\n        <form>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\"></div>\r\n            <div className=\"col-md-4\">\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={this.state.items}\r\n                  onChange={this.onChangeSearch}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n              <button\r\n                className=\"form-control btn-primary\"\r\n                onClick={this.checkTicker}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          {this.handleCount()}\r\n          <br />\r\n          <table border={1}>\r\n            <tbody>\r\n              {this.handleHeader()}\r\n              {this.state.results.map(function(eachField, index) {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{eachField.body}</td>\r\n                    <td>{eachField.created_at}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Search from \"./components/search/Search\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a\n              className=\"navbar-brand\"\n              href=\"https://codingthesmartway.com\"\n              target=\"_blank\"\n            ></a>\n            <Link to=\"/\" className=\"navbar-brand\">\n              StockTwits Search App\n            </Link>\n          </nav>\n          <br />\n          <Route path=\"/\" component={Search} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}